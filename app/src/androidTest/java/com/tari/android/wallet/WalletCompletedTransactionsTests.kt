/**
 * Copyright 2019 The Tari Project
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the
 * following conditions are met:

 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.

 * 3. Neither the name of the copyright holder nor the names of
 * its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.tari.android.wallet

import com.orhanobut.logger.Logger
import com.tari.android.wallet.ffi.CompletedTransactionPtr
import com.tari.android.wallet.ffi.NULL_POINTER
import com.tari.android.wallet.ffi.OnTransactionMinedListener
import com.tari.android.wallet.ffi.OnTransactionReplyReceivedListener
import org.junit.Assert.*
import org.junit.Test

/**
 * FFI wallet completed transaction tests - operates on test data generated by the FFI.
 *
 * @author Kutsal Kaan Bilgin
 */
class WalletCompletedTransactionsTests {

    val wallet = TestUtil.testWallet

    @Test
    fun testGetAndDestroyCompletedTransactions() {
        val completedTransactions = wallet.getCompletedTransactions()
        assertTrue(completedTransactions.ptr != NULL_POINTER)
        assertTrue(completedTransactions.length > 0)
        completedTransactions.destroy()
        assertTrue(completedTransactions.ptr == NULL_POINTER)
    }

    @Test
    fun testGetCompletedTransaction() {
        val completedTransactions = wallet.getCompletedTransactions()
        val completedTx = completedTransactions.getAt(completedTransactions.length - 1)
        assertTrue(completedTx.ptr != NULL_POINTER)

        // get from wallet
        val walletTx = wallet.getCompletedTransactionById(completedTx.getId())
        assertEquals(completedTx.getId(), walletTx.getId())

        completedTransactions.destroy()
        completedTx.destroy()
        walletTx.destroy()
    }

    @Test
    fun testCompletedTransaction() {
        val completedTransactions = wallet.getCompletedTransactions()
        val completedTx = completedTransactions.getAt(completedTransactions.length - 1)

        assertTrue(completedTx.getId() != 0L)
        assertTrue(completedTx.getAmount() != 0L)
        assertTrue(completedTx.getFee() != 0L)
        assertTrue(completedTx.getTimestamp() != 0L)
        val sourcePublicKey = completedTx.getSourcePublicKey()
        assertTrue(sourcePublicKey.ptr != NULL_POINTER)
        val destinationPublicKey = completedTx.getDestinationPublicKey()
        assertTrue(destinationPublicKey.ptr != NULL_POINTER)
        assertTrue(sourcePublicKey.ptr != destinationPublicKey.ptr)

        sourcePublicKey.destroy()
        destinationPublicKey.destroy()
        completedTransactions.destroy()
        completedTx.destroy()
    }

}