/**
 * Copyright 2019 The Tari Project
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the
 * following conditions are met:

 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.

 * 3. Neither the name of the copyright holder nor the names of
 * its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.tari.android.wallet

import com.orhanobut.logger.Logger
import com.tari.android.wallet.ffi.CompletedTransaction
import com.tari.android.wallet.ffi.CompletedTransactionPtr
import com.tari.android.wallet.ffi.NULL_POINTER
import com.tari.android.wallet.ffi.OnTransactionMinedListener
import org.junit.Assert.*
import org.junit.Test

/**
 * FFI wallet pending outbound transaction tests - operates on test data generated by the FFI.
 *
 * @author Kutsal Kaan Bilgin
 */
class WalletPendingOutboundTransactionsTests: OnTransactionMinedListener {

    val wallet = TestUtil.testWallet
    var transactionMinedCallbackReceived = false

    init {
        wallet.setOnTransactionMinedListener(this)
    }

    @Test
    fun testGetAndDestroyOutboundTransactions() {
        val outboundTxs = wallet.getPendingOutboundTransactions()
        assertTrue(outboundTxs.ptr != NULL_POINTER)
        assertTrue(outboundTxs.length > 0)
        outboundTxs.destroy()
        assertTrue(outboundTxs.ptr == NULL_POINTER)
    }

    @Test
    fun testGetOutboundTransaction() {
        val outboundTxs = wallet.getPendingOutboundTransactions()
        assertTrue(outboundTxs.length > 0)
        val outboundTx = outboundTxs.getAt(outboundTxs.length - 1)
        assertTrue(outboundTx.ptr != NULL_POINTER)

        // get from wallet
        val walletTx = wallet.getPendingOutboundTransactionById(outboundTx.getId())
        assertEquals(outboundTx.getId(), walletTx.getId())

        outboundTx.destroy()
        outboundTxs.destroy()
        walletTx.destroy()
    }

    @Test
    fun testPendingOutboundTransaction() {
        val outboundTxs = wallet.getPendingOutboundTransactions()
        val outboundTx = outboundTxs.getAt(outboundTxs.length - 1)

        assertTrue(outboundTx.getId() != 0L)
        assertTrue(outboundTx.getAmount() != 0L)
        assertTrue(outboundTx.getTimestamp() != 0L)
        val destinationPublicKey = outboundTx.getDestinationPublicKey()
        assertTrue(destinationPublicKey.ptr != NULL_POINTER)

        destinationPublicKey.destroy()
        outboundTx.destroy()
        outboundTxs.destroy()
    }

    @Test
    fun testCompleteAndMineSentTransaction() {
        val outboundTxs = wallet.getPendingOutboundTransactions()
        val outboundTx = outboundTxs.getAt(outboundTxs.length - 1)

        // test complete
        assertTrue(wallet.testCompleteSentTransaction(outboundTx))
        val completedTx = wallet.getCompletedTransactionById(outboundTx.getId())
        assertTrue(completedTx.ptr != NULL_POINTER)

        // test mined
        assertTrue(wallet.testMined(completedTx))
        val minedTx = wallet.getCompletedTransactionById(outboundTx.getId())
        assertEquals(minedTx.getStatus(), CompletedTransaction.Status.MINED)

        minedTx.destroy()
        completedTx.destroy()
        outboundTx.destroy()
        outboundTxs.destroy()

        Thread.sleep(1000)
        assertTrue(transactionMinedCallbackReceived)
    }

    override fun onTransactionMined(ptr: CompletedTransactionPtr) {
        Logger.d("Transaction mined.")
        transactionMinedCallbackReceived = true
    }

}