/**
 * Copyright 2019 The Tari Project
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the
 * following conditions are met:

 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.

 * 3. Neither the name of the copyright holder nor the names of
 * its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.tari.android.wallet

import com.orhanobut.logger.Logger
import com.tari.android.wallet.ffi.*
import org.junit.Assert.*
import org.junit.Test

/**
 * FFI wallet pending inbound transaction tests - operates on test data generated by the FFI.
 *
 * @author Kutsal Kaan Bilgin
 */
class WalletPendingInboundTransactionsTests : OnTransactionReceivedListener,
    OnTransactionBroadcastListener {

    val wallet = TestUtil.testWallet
    var transactionReceivedCallbackReceived = false
    var transactionBroadcastCallbackReceived = false

    init {
        wallet.setOnTransactionReceivedListener(this)
        wallet.setOnTransactionBroadcastListener(this)
    }

    @Test
    fun testGetAndDestroyInboundTransactions() {
        val inboundTxs = wallet.getPendingInboundTransactions()
        assertTrue(inboundTxs.ptr != NULL_POINTER)
        inboundTxs.destroy()
        assertTrue(inboundTxs.ptr == NULL_POINTER)
    }

    @Test
    fun testGetInboundTransaction() {
        assertTrue(wallet.testReceiveTransaction())
        val inboundTxs = wallet.getPendingInboundTransactions()
        assertTrue(inboundTxs.length > 0)
        val inboundTx = inboundTxs.getAt(inboundTxs.length - 1)
        assertTrue(inboundTx.ptr != NULL_POINTER)

        // get from wallet
        val walletTx = wallet.getPendingInboundTransactionById(inboundTx.getId())
        assertEquals(inboundTx.getId(), walletTx.getId())

        inboundTx.destroy()
        inboundTxs.destroy()
        walletTx.destroy()
    }

    @Test
    fun testPendingInboundTransaction() {
        assertTrue(wallet.testReceiveTransaction())
        val inboundTxs = wallet.getPendingInboundTransactions()
        assertTrue(inboundTxs.length > 0)
        val inboundTx = inboundTxs.getAt(inboundTxs.length - 1)

        assertTrue(inboundTx.getId() != 0L)
        assertTrue(inboundTx.getAmount() != 0L)
        assertTrue(inboundTx.getTimestamp() != 0L)
        val sourcePublicKey = inboundTx.getSourcePublicKey()
        assertTrue(sourcePublicKey.ptr != NULL_POINTER)

        wallet.testTransactionBroadcast(inboundTx)
        wallet.testTransactionBroadcast(inboundTx)

        sourcePublicKey.destroy()
        inboundTx.destroy()
        inboundTxs.destroy()

        Thread.sleep(1000)
        assertTrue(transactionReceivedCallbackReceived)
        assertTrue(transactionBroadcastCallbackReceived)
    }


    override fun onTransactionReceived(ptr: PendingInboundTransactionPtr) {
        Logger.d("Transaction received.")
        transactionReceivedCallbackReceived = true
    }

    override fun onTransactionBroadcast(ptr: CompletedTransactionPtr) {
        Logger.d("Transaction broadcast.")
        transactionBroadcastCallbackReceived = true
    }

}