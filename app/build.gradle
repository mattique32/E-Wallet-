import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.tari.android.wallet"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode buildNumber
        versionName versionNumber + "-jniLibs-" + jniLibsVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters = []
            abiFilters.addAll(supportedABIs)
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static'
            }
        }
    }

//    SIGNING: uncomment (remove two slashes at the start) this for release builds support
//    signingConfigs {
//        release {
//            storeFile file(/*enter relative path to the keystore .jks file*/)
//            storePassword secretProperties[/*enter keystore password*/]
//            keyAlias secretProperties[/*enter application alias*/]
//            keyPassword secretProperties[/*enter application alias password*/]
//        }
//    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            jniDebuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//             SIGNING: uncomment (remove two slashes at the start) this for release builds support
//            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "privacy-mode"

    productFlavors {
        regular {
            dimension "privacy-mode"
        }
        privacy {
            dimension "privacy-mode"
        }
    }

    applicationVariants.all { variant ->
        if (variant.productFlavors.get(0).name == "regular") {
            if (variant.buildType.name == "debug") {
                variant.mergedFlavor.manifestPlaceholders.sentryPublicDSN = ''
            } else {
                final File secretPropertiesFile = project.rootProject.file("secret.properties")
                if (!secretPropertiesFile.exists()) {
                    Files.copy(
                            Paths.get(project.rootProject.file("secret-example.properties").absolutePath),
                            Paths.get(secretPropertiesFile.absolutePath),
                    )
                }
                Properties properties = new Properties()
                properties.load(project.rootProject.file("secret.properties").newDataInputStream())
                variant.mergedFlavor.manifestPlaceholders.sentryPublicDSN = properties.getProperty('sentry.public_dsn')
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    viewBinding {
        enabled = true
    }

}

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    // kotlin extensions
    implementation 'androidx.core:core-ktx:1.3.0-rc01'
    // android
    implementation 'androidx.appcompat:appcompat:1.1.0'
    // support lib
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // android jetpack
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    // recycler view
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    // swipe refresh
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    // the new view pager
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    // for tab layout
    implementation 'com.google.android.material:material:1.1.0'
    // overscroll
    implementation 'me.everything:overscroll-decor-android:1.0.4'
    // lottie
    implementation 'com.airbnb.android:lottie:3.4.0'
    // spring animation
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'com.daasuu:EasingInterpolator:1.3.0'
    // seismic - device shake detector
    implementation 'com.squareup:seismic:1.0.2'

    // biometric
    implementation 'androidx.biometric:biometric:1.0.1'

    // joda
    implementation "net.danlew:android.joda:2.10.3"

    // parceler
    implementation 'org.parceler:parceler-api:1.1.13'
    kapt 'org.parceler:parceler:1.1.13'

    // dagger - DI
    implementation 'com.google.dagger:dagger:2.27'
    kapt 'com.google.dagger:dagger-compiler:2.27'

    // rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'

    // unicode library - for emoji processing
    implementation 'com.ibm.icu:icu4j:66.1'

    // logger
    implementation 'com.orhanobut:logger:2.2.0'

    // QR scanner
    implementation 'com.budiyev.android:code-scanner:2.1.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.1.0'

    // encryption
    implementation "de.adorsys.android:securestoragelibrary:1.2.4"

    // Tor control
    implementation 'net.freehaven.tor.control:jtorctl:0.2'

    // used to read log files
    //noinspection GradleDependency
    implementation 'commons-io:commons-io:2.6'

    // JSON reflection-based (+de)serialization library
    implementation 'com.google.code.gson:gson:2.8.6'

    // retrofit
    regularImplementation 'com.squareup.retrofit2:retrofit:2.8.1'
    regularImplementation 'com.squareup.retrofit2:converter-gson:2.8.1'
    regularImplementation 'com.squareup.okhttp3:logging-interceptor:4.2.1'
    // matomo - tracking
    regularImplementation 'org.matomo.sdk:tracker:4.1.2'
    // sentry - crash analytics
    regularImplementation 'io.sentry:sentry-android:2.1.1'

    // test
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:2.19.0'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
