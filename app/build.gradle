import java.nio.file.Files
import java.nio.file.Paths

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply from: "../download-libwallet.gradle"
apply plugin: "io.sentry.android.gradle"

android {
    namespace "com.tari.android.wallet"

    defaultConfig {
        applicationId "com.tari.android.wallet"
        minSdkVersion 26
        targetSdkVersion 33
        compileSdk 33
        versionCode buildNumber
        versionName versionNumber + "-libwallet-" + libwalletVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true

        ndk {
            abiFilters = []
            abiFilters.addAll(supportedABIs)
        }
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static"
            }
        }

        def yatProperties = loadYatProps()
        buildConfigField("String", "YAT_ORGANIZATION_NAME", "\"${yatProperties.getProperty("yat.name")}\"")
        buildConfigField("String", "YAT_ORGANIZATION_KEY", "\"${yatProperties.getProperty("yat.key")}\"")
        buildConfigField("String", "YAT_ORGANIZATION_RETURN_URL", "\"${yatProperties.getProperty("yat.returnUrl")}\"")
        def dropboxProperties = loadDropboxProps()
        buildConfigField("String", "DROPBOX_ACCESS_TOKEN", "\"${dropboxProperties.getProperty("dropbox_key")}\"")
    }

    flavorDimensions.add("privacy-mode")

    buildTypes {
        loadSentryProps()
        def secretProperties = loadSecretProps()

        debug {
            jniDebuggable true
            buildConfigField("String", "GIPHY_KEY", "\"${secretProperties.getProperty("giphy.key")}\"")
        }
        release {
            buildConfigField("String", "GIPHY_KEY", "\"${secretProperties.getProperty("giphy.key")}\"")
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            ndk {
                debugSymbolLevel "FULL"
            }
//            PRIVATE BUILD: uncomment (remove two slashes at the start) the following line for
//            private release builds support
//            signingConfig signingConfigs.debug

//            PRIVATE BUILD: comment (add two slashes at the start of each line) all the `sentry`
//            block for private release builds support
            sentry { // https://docs.sentry.io/platforms/android/#gradle-configuration
                autoUpload.set(true)
                uploadNativeSymbols.set(true)
                includeNativeSources.set(true)
            }
        }
    }

    productFlavors {
        regular {
            dimension "privacy-mode"
            buildConfigField "String", "NOTIFICATIONS_API_KEY", "\"${loadSecretProps().getProperty("service.notifications.api_key")}\""
            proguardFile "regular-proguard-rules.pro"
        }
        privacy {
            dimension "privacy-mode"
            buildConfigField "String", "NOTIFICATIONS_API_KEY", "\"${loadSecretProps().getProperty("service.notifications.api_key")}\""
        }
    }

    applicationVariants.configureEach { variant ->
        variant.mergedFlavor.manifestPlaceholders.dropboxApiKey = loadDropboxProps().getProperty("dropbox_key")
        if (variant.buildType.name == "debug") {
            variant.mergedFlavor.manifestPlaceholders.sentryPublicDSN = ""
        } else {
            variant.mergedFlavor.manifestPlaceholders.sentryPublicDSN = loadSecretProps().getProperty("sentry.public_dsn")
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        resources {
            excludes += [
                    //added for exclude resources duplication
                    "META-INF/DEPENDENCIES",
                    "META-INF/LICENSE",
                    "META-INF/LICENSE.txt",
                    "META-INF/LICENSE.md",
                    "META-INF/license.txt",
                    "META-INF/NOTICE",
                    "META-INF/NOTICE.txt",
                    "META-INF/NOTICE.md",
                    "META-INF/notice.txt",
                    "META-INF/AL2.0",
                    "META-INF/LGPL2.1",
                    "META-INF/INDEX.LIST",
                    "META-INF/ASL2.0",
                    "META-INF/LICENSE-notice.md",
                    "META-INF/io.netty.versions.properties",
                    "mozilla/public-suffix-list.txt",
                    "xsd/catalog.xml",
                    "kotlin/internal/internal.kotlin_builtins",
                    "kotlin/ranges/ranges.kotlin_builtins",
                    "kotlin/coroutines/coroutines.kotlin_builtins",
                    "kotlin/kotlin.kotlin_builtins",
                    "kotlin/reflect/reflect.kotlin_builtins",
                    "kotlin/collections/collections.kotlin_builtins",
                    "kotlin/annotation/annotation.kotlin_builtins",
                    "com/itextpdf/io/font/cmap/HYSMyeongJoStd-Medium.properties",
                    "com/itextpdf/io/font/cmap/HYGoThic-Medium.properties",
                    "com/itextpdf/io/font/cmap/HYSMyeongJo-Medium.properties",
                    "com/itextpdf/io/font/cmap/KozMinPro-Regular.properties",
                    "com/itextpdf/io/font/cmap/MSungStd-Light.properties",
                    "com/itextpdf/io/font/cmap_info.txt",
                    "com/itextpdf/io/font/cmap/STSong-Light.properties",
                    "com/itextpdf/io/font/cmap/STSongStd-Light.properties",
                    "com/itextpdf/io/font/cmap/HeiseiKakuGo-W5.properties",
                    "com/itextpdf/io/font/cmap/MSung-Light.properties",
                    "com/itextpdf/io/font/cmap/MHei-Medium.properties",
                    "com/itextpdf/io/font/cmap/HeiseiMin-W3.properties",
                    "com/itextpdf/io/font/cmap/cjk_registry.properties"
            ]
        }
    }
    lint {
        disable "LintError", "NewApi", "TimberExceptionLogging", "LogNotTimber", "StringFormatInTimber",
                "ThrowableNotAtBeginning", "BinaryOperationInTimber", "TimberArgCount", "TimberArgTypes",
                "TimberTagLength"
    }

    configurations.configureEach {
        resolutionStrategy.dependencySubstitution {
            // Substitute one module dependency for another for excluding libs duplication
            substitute module("com.sun.activation:javax.activation:1.2.0") using module("jakarta.activation:jakarta.activation-api:1.2.1")
            substitute module("org.jetbrains.kotlin:kotlin-android-extensions-runtime:1.4.20") using module("org.jetbrains.kotlin:kotlin-android-extensions:1.6.21")
            substitute module("xpp3:xpp3:1.1.4c") using module("xml-apis:xml-apis:1.4.01")
            substitute module("xmlpull:xmlpull:1.1.3.1") using module("net.sf.kxml:kxml2:2.3.0")
            substitute module("org.jetbrains.kotlin:kotlin-build-common:1.6.21") using module("org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.21")
            substitute module("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21") using module("org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.21")
        }
    }
}

Properties loadSecretProps() {
    return loadProps("secret")
}

Properties loadSentryProps() {
    return loadProps("sentry")
}

Properties loadYatProps() {
    return loadProps("yat")
}

Properties loadDropboxProps() {
    return loadProps("dropbox")
}

Properties loadProps(fileName) {
    final File props = project.rootProject.file(fileName + ".properties")
    if (!props.exists()) {
        Files.copy(
                Paths.get(project.rootProject.file(fileName + "-example.properties").absolutePath),
                Paths.get(props.absolutePath),
        )
    }
    final Properties properties = new Properties()
    properties.load(props.newDataInputStream())
    return properties
}

//preBuild.dependsOn("downloadLibwallet")

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:1.5.7"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // kotlin extensions
    implementation "androidx.core:core-ktx:1.10.1"
    // android
    implementation "androidx.appcompat:appcompat:1.6.1"
    // support lib
    implementation "androidx.legacy:legacy-support-v13:1.0.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    // android jetpack
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    // recycler view
    implementation "androidx.recyclerview:recyclerview:1.3.1-rc01"
    // the new view pager
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    // for tab layout
    implementation "com.google.android.material:material:1.9.0"
    // lottie
    implementation 'com.airbnb.android:lottie:6.0.0'
    // Glide - image processing & caching library
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    kapt 'com.github.bumptech.glide:compiler:4.15.1'

    // biometric
    implementation "androidx.biometric:biometric:1.1.0"

    // joda
    implementation 'net.danlew:android.joda:2.12.1'

    // parceler
    implementation "org.parceler:parceler-api:1.1.13"
    kapt "org.parceler:parceler:1.1.13"

    // dagger - DI
    implementation 'com.google.dagger:dagger:2.45'
    kapt 'com.google.dagger:dagger-compiler:2.45'

    // rx
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.21"

    // logger
    implementation "com.orhanobut:logger:2.2.0"

    // QR scanner
    implementation "com.github.yuriy-budiyev:code-scanner:2.3.2"
    implementation "com.journeyapps:zxing-android-embedded:4.3.0"

    // encryption
    implementation "com.github.adorsys:secure-storage-android:0.0.2"

    // Tor control
    implementation "info.guardianproject:tor-android:0.4.7.8"
    implementation "info.guardianproject:jtorctl:0.4.5.7"

    // used to read log files
    //noinspection GradleDependency
    implementation "commons-io:commons-io:2.11.0"

    // JSON reflection-based (+de)serialization library
    implementation 'com.google.code.gson:gson:2.10.1'

    // Retrofit2 - Popular (2020) REST API wrapper with Java interface
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.10"

    // Google services & Google drive
    implementation platform('com.google.firebase:firebase-bom:31.2.3')
    implementation 'com.google.firebase:firebase-crashlytics'

    implementation 'com.google.android.gms:play-services-auth:20.4.1'
    implementation 'com.google.http-client:google-http-client-gson:1.43.1'
    implementation('com.google.api-client:google-api-client-android:2.2.0') {
        exclude group: "org.apache.httpcomponents"
    }
    implementation('com.google.apis:google-api-services-drive:v3-rev20221023-2.0.0') {
        exclude group: "org.apache.httpcomponents"
    }
    // sentry - crash analytics
    implementation 'io.sentry:sentry-android:6.16.0'

    implementation "com.dropbox.core:dropbox-core-sdk:5.4.4"

    implementation "com.github.yat-labs:yat-lib-android:0.1.42"


    // custom libraries region
    // flex layout
    implementation "com.google.android.flexbox:flexbox:3.0.0"
    // overscroll
    implementation "io.github.everythingme:overscroll-decor-android:1.1.1"

    // giphy, don"t update to 2.2.0 because of not compatible yet
    implementation 'com.giphy.sdk:ui:2.3.1'
    // spring animation
    implementation "androidx.dynamicanimation:dynamicanimation:1.0.0"
    implementation "com.github.MasayukiSuda:EasingInterpolator:v1.3.2"

    // seismic - device shake detector
    implementation "com.squareup:seismic:1.0.3"

    implementation "net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:2.3.0"

    implementation 'com.itextpdf:itext7-core:7.2.5'

    implementation("org.apache.maven:maven-artifact:3.0.3")

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'

    implementation 'com.github.vestrel00:contacts-android:0.2.4'

    implementation "com.github.weliem:blessed-android:2.4.2"

    // test
    testImplementation "junit:junit:4.13.2"
    testImplementation 'io.mockk:mockk:1.13.4'
    androidTestImplementation 'io.mockk:mockk-android:1.13.4'
    androidTestImplementation "androidx.test:core:1.5.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
}
